generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id               Int               @id @default(autoincrement())
  username         String            @unique
  password         String
  email            String            @unique
  bio              String?
  avatar           String?
  messagesSent     PrivateMessages[] @relation("SenderMessages")
  messagesReceived PrivateMessages[] @relation("ReceiverMessages")
  friends          Friends[]         @relation("UserRelation")

  pendingRequestsSent     PendingFriendRequests[] @relation("SentRequests")
  pendingRequestsReceived PendingFriendRequests[] @relation("ReceivedRequests")

  Friends Friends[] @relation("FriendRelation")

  GroupChats    GroupChats[]
  GroupMembers  GroupMembers[]
  GroupMessages GroupMessages[] @relation("SenderMessages")

  blocking  Blocks[] @relation("BlockingRelation")
  blockedBy Blocks[] @relation("BlockedRelation")

  @@map("users")
}

model PrivateMessages {
  id          Int      @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  content     String
  created_at  DateTime @default(now())
  sender      Users    @relation("SenderMessages", fields: [sender_id], references: [id])
  receiver    Users    @relation("ReceiverMessages", fields: [receiver_id], references: [id])

  attachments PrivateMessagesAttachment[]

  @@map("messages")
}

model PrivateMessagesAttachment {
  id             Int             @id @default(autoincrement())
  message_id     Int
  privateMessage PrivateMessages @relation(fields: [message_id], references: [id], onDelete: Cascade)

  size           Int
  path           String
  originalName   String
  uniqueFileName String
  created_at     DateTime @default(now())

  @@index([message_id])
}

model GroupMessages {
  id         Int        @id @default(autoincrement())
  sender_id  Int
  group_id   Int
  content    String
  created_at DateTime   @default(now())
  group      GroupChats @relation(fields: [group_id], references: [id], onDelete: Cascade)
  sender     Users      @relation("SenderMessages", fields: [sender_id], references: [id])

  attachments GroupMessagesAttachment[]
}

model GroupMessagesAttachment {
  id           Int           @id @default(autoincrement())
  message_id   Int
  groupMessage GroupMessages @relation(fields: [message_id], references: [id], onDelete: Cascade)

  size           Int
  path           String
  originalName   String
  uniqueFileName String
  created_at     DateTime @default(now())

  @@index([message_id])
}

model Friends {
  user_id   Int
  friend_id Int

  User   Users @relation("UserRelation", fields: [user_id], references: [id])
  Friend Users @relation("FriendRelation", fields: [friend_id], references: [id])

  @@id([user_id, friend_id])
  @@unique([friend_id, user_id])
}

model PendingFriendRequests {
  sender_id   Int
  receiver_id Int

  Sender   Users @relation("SentRequests", fields: [sender_id], references: [id])
  Receiver Users @relation("ReceivedRequests", fields: [receiver_id], references: [id])

  @@id([sender_id, receiver_id])
  @@unique([sender_id, receiver_id])
}

model GroupChats {
  id       Int     @id @default(autoincrement())
  admin_id Int
  Admin    Users   @relation(fields: [admin_id], references: [id])
  name     String?

  description String?
  avatar      String?

  GroupMembers  GroupMembers[]
  GroupMessages GroupMessages[]
}

model Blocks {
  blocked Int
  blocker Int
  friends Boolean?

  BlockedUser  Users @relation("BlockedRelation", fields: [blocked], references: [id])
  BlockingUser Users @relation("BlockingRelation", fields: [blocker], references: [id])

  @@id([blocked, blocker])
}

model GroupMembers {
  group_id  Int
  member_id Int

  Member Users      @relation(fields: [member_id], references: [id])
  Group  GroupChats @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@id([group_id, member_id])
  @@unique([member_id, group_id])
}
